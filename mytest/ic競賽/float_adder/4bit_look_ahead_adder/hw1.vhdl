-- generated by Digital. Don't modify this file!
-- Any changes will be lost if this file is regenerated.

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

entity adder is
  port (
    A: in std_logic;
    Ci: in std_logic;
    B: in std_logic;
    Co: out std_logic;
    S: out std_logic);
end adder;

architecture Behavioral of adder is
begin
  S <= (A XOR B XOR Ci);
  Co <= ((A AND B) OR (A AND Ci) OR (B AND Ci));
end Behavioral;

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

entity n4_bit_adder_and_subtractor is
  port (
    B0: in std_logic;
    A0: in std_logic;
    B1: in std_logic;
    A1: in std_logic;
    B2: in std_logic;
    A2: in std_logic;
    B3: in std_logic;
    A3: in std_logic;
    Subtraction: in std_logic;
    S0: out std_logic;
    S1: out std_logic;
    S2: out std_logic;
    S3: out std_logic;
    Co: out std_logic);
end n4_bit_adder_and_subtractor;

architecture Behavioral of n4_bit_adder_and_subtractor is
  signal s4: std_logic;
  signal s5: std_logic;
  signal s6: std_logic;
  signal s7: std_logic;
  signal s8: std_logic;
  signal s9: std_logic;
  signal s10: std_logic;
begin
  s4 <= (Subtraction XOR B0);
  s6 <= (Subtraction XOR B1);
  s8 <= (Subtraction XOR B2);
  s10 <= (Subtraction XOR B3);
  gate0: entity work.adder
    port map (
      A => A0,
      Ci => Subtraction,
      B => s4,
      Co => s5,
      S => S0);
  gate1: entity work.adder
    port map (
      A => A1,
      Ci => s5,
      B => s6,
      Co => s7,
      S => S1);
  gate2: entity work.adder
    port map (
      A => A2,
      Ci => s7,
      B => s8,
      Co => s9,
      S => S2);
  gate3: entity work.adder
    port map (
      A => A3,
      Ci => s9,
      B => s10,
      Co => Co,
      S => S3);
end Behavioral;

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

entity sub_display is
  port (
    S3: in std_logic;
    S2: in std_logic;
    S1: in std_logic;
    S0: in std_logic;
    a: out std_logic;
    b: out std_logic;
    c: out std_logic;
    d: out std_logic;
    e: out std_logic;
    f: out std_logic;
    g: out std_logic);
end sub_display;

architecture Behavioral of sub_display is
  signal s4: std_logic;
  signal s5: std_logic;
  signal s6: std_logic;
  signal s7: std_logic;
begin
  s6 <= NOT S3;
  s5 <= NOT S2;
  s4 <= NOT S1;
  s7 <= NOT S0;
  a <= ((S0 AND s4 AND s5 AND s6) OR (s7 AND s4 AND S2) OR (S0 AND S1 AND S2 AND S3));
  b <= ((S0 AND s4 AND S2 AND s6) OR (s7 AND S1 AND S2 AND s6) OR (S1 AND s5 AND S3));
  c <= ((s7 AND S1 AND s5 AND s6) OR (s7 AND S1 AND S2 AND S3));
  d <= ((S0 AND s4 AND s5) OR (s7 AND s4 AND S2) OR (S0 AND S1 AND S2));
  e <= (S0 OR (s4 AND S2));
  f <= ((S0 AND s5 AND s6) OR (S0 AND S2 AND S3) OR (S0 AND S1 AND S2) OR (S1 AND s5 AND s6) OR (S1 AND S2 AND S3));
  g <= ((S0 AND S1 AND S2) OR (S0 AND s4 AND s5) OR (s4 AND s5 AND s6));
end Behavioral;

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

entity main is
  port (
    B2: in std_logic;
    A2: in std_logic;
    A3: in std_logic;
    B3: in std_logic;
    SUB: in std_logic;
    B0: in std_logic;
    A0: in std_logic;
    A1: in std_logic;
    B1: in std_logic;
    x: out std_logic;
    a: out std_logic;
    b: out std_logic;
    c: out std_logic;
    d: out std_logic;
    e: out std_logic;
    f: out std_logic;
    g: out std_logic;
    g2: out std_logic);
end main;

architecture Behavioral of main is
  signal s0: std_logic;
  signal s1: std_logic;
  signal s2: std_logic;
  signal s3: std_logic;
begin
  gate0: entity work.n4_bit_adder_and_subtractor
    port map (
      B0 => B0,
      A0 => A0,
      B1 => B1,
      A1 => A1,
      B2 => B2,
      A2 => A2,
      B3 => B3,
      A3 => A3,
      Subtraction => SUB,
      S0 => s3,
      S1 => s2,
      S2 => s1,
      S3 => s0,
      Co => x);
  gate1: entity work.sub_display
    port map (
      S3 => s0,
      S2 => s1,
      S1 => s2,
      S0 => s3,
      a => a,
      b => b,
      c => c,
      d => d,
      e => e,
      f => f,
      g => g);
  g2 <= NOT s0;
end Behavioral;

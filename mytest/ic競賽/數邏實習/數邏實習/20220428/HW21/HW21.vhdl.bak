-- generated by Digital. Don't modify this file!
-- Any changes will be lost if this file is regenerated.

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

entity test is	
	port	(
		-- Input ports
		clk, x: in  std_logic;
		
		-- Output ports		
		a_out, b_out, c_out, f: out std_logic);
end test;

architecture state_graph of test is	
	signal z : std_logic_vector(2 downto 0) := "000";
Begin
	a_out <= z(0);
	b_out <= z(1);
	c_out <= z(2);
		f <= (z(2) and x) or (z(1) and not z(0) and x);
	process(clk) is
 	begin
 		if(rising_edge(clk)) then
			if(z = "000" and x = '0') then z <= "001";
			elsif(z = "000" and x = '1') then z <= "011";
			elsif(z = "001" and x = '0') then z <= "010";
			elsif(z = "001" and x = '1') then z <= "011";
			elsif(z = "010" and x = '0') then z <= "001";
			elsif(z = "010" and x = '1') then z <= "011";
			elsif(z = "011" and x = '0') then z <= "100";
			elsif(z = "011" and x = '1') then z <= "000";
			elsif(z = "100" and x = '0') then z <= "011";
			elsif(z = "100" and x = '1') then z <= "000";
			end if;
		end if;
	end process; 
end state_graph;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

entity main is
  port (
    clk: in std_logic;
    x: in std_logic;
    C: out std_logic;
    B: out std_logic;
    A: out std_logic;
    Z: out std_logic);
end main;

architecture Behavioral of main is
begin
  gate0: entity work.test -- test
    port map (
      clk => clk,
      x => x,
      a_out => C,
      b_out => B,
      c_out => A,
      f => Z);
end Behavioral;
